//////////////////////////////////////////////////////////////////////////
// This file belongs to qOldFox.                                        //
// Copyright (C) 2012 Ashok Shankar Das ashok.s.das@gmail.com           //
// Released under GNU GPL-V2 licence.                                   //
// for details of licence please see the copying file                   //
// or visit http://www.gnu.org and get a copy of GNU GPL-V2 licence     //
// This file is automatically generated by QtCreator.                   //
//////////////////////////////////////////////////////////////////////////

#include "dialog.h"
#include "ui_dialog.h"
#include <arpa/inet.h>

Dialog::Dialog(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::Dialog)
{
    setup_database();
    ui->setupUi(this);
    load_map();
    connect(&tracer,SIGNAL(error(QProcess::ProcessError)),this,SLOT(processError(QProcess::ProcessError)));
    connect(&tracer,SIGNAL(readyReadStandardOutput()),this,SLOT(myOutput()));
}

Dialog::~Dialog()
{
    delete ui;
}
void Dialog::setup_database()
{
    db= QSqlDatabase::addDatabase("QSQLITE");
    db.setDatabaseName("maxmind.db");
    if(!db.open())
    {
        QMessageBox::critical(NULL,"Database Error","Could not open database file",QMessageBox::Cancel);
        return;
    }
}

long ip_to_num(const char *str)
{
        long ip_num;
        ip_num=inet_network(str);
        if(ip_num == -1)
        {
            perror("inet_netork");
            return 0;
        }
        return ip_num;
}
bool is_private_ip(QString *ipstr)
{
    if(ipstr->left(3)=="10.")
        return true;
    if(ipstr->left(4)=="127.")
        return true;
    if(ipstr->left(8)=="192.168.")
        return true;
    return false;
       
}
void Dialog::load_map()
{
    QImage img("./world5.gif");
    if(!img.isNull())
    {
        myScene.addPixmap(QPixmap::fromImage(img));
    }
    ui->worldview->setScene(&myScene);
}

void Dialog::on_traceButton_clicked()
{
    QString cmdstr;

    cmdstr.append("traceroute ");
    cmdstr.append(ui->targetEdit->text());
    tracer.start(cmdstr);
}

void Dialog::on_exitButton_clicked()
{
    db.close();
    if(tracer.isOpen())
        tracer.close();
    close();
}

void Dialog::on_stopButton_clicked()
{
    tracer.kill();
    myScene.clear();
    load_map();
    ui->targetEdit->clear();
}

void Dialog::processError(QProcess::ProcessError err)
{
    switch(err)
            {
            case QProcess::FailedToStart:
                    QMessageBox::information(0,"FailedToStart","FailedToStart");
                    break;
            case QProcess::Crashed:
                    QMessageBox::information(0,"Crashed","Crashed or Killed by user");
                    break;
            case QProcess::Timedout:
                    QMessageBox::information(0,"TimedOut","Timed Out");
                    break;
            case QProcess::WriteError:
                    QMessageBox::information(0,"WriteError","Write Error");
                    break;
            case QProcess::ReadError:
                    QMessageBox::information(0,"ReadError","ReadError");
                    break;
            case QProcess::UnknownError:
                    QMessageBox::information(0,"UnknownError","UnknownError");
                    break;
            default:
                    QMessageBox::information(0,"default","default");
                    break;
            }
}

void Dialog::myOutput()
{
    QString mystr;
    mystr.append(tracer.readAllStandardOutput());
    if(!mystr.contains("hops max"))
    {
        QString ipstr;
        QStringList field= mystr.split("(");
        ipstr.append(field.last().split(")").first());
        if(is_private_ip(&ipstr))
        {
            qDebug()<<"Private IP";
        }
        else
        {

            if(!ipstr.contains("ms") && !ipstr.contains("*")&& ipstr.length()>1)
            {
                unsigned long cidr = ip_to_num(ipstr.toLocal8Bit());
                //qDebug()<<ipstr<<" cidr= "<<cidr;
                model.setQuery(QString("SELECT city,latitude,longitude,country FROM city_loc WHERE locid=(SELECT locid FROM city_block WHERE startip<=%1 AND endip>=%2)").arg(cidr,0,10).arg(cidr,0,10));
                myLocation m;
                m.city="";
                m.latitude=0;
                m.longitude=0;
                //qDebug()<<model.record().count();
                m.city.append(model.record(0).value(0).toString());
                m.city.append('[');
                m.city.append(model.record(0).value(3).toString());
                m.city.append(']');
                m.latitude=model.record(0).value(1).toFloat();
                m.longitude=model.record(0).value(2).toFloat();
                plotLocation(&m);
                //qDebug()<<m.city<<" "<<m.latitude<<" "<<m.longitude<<" "<<model.record(0).value(3).toString();
            }
        }
    }
}
void Dialog::plotLocation(myLocation *mloc)
{
    QPoint p;
    mypen.setBrush(Qt::red);
    //if(!mloc->city.isNull())
    {
        p.setX(360+mloc->longitude*2);
        p.setY(180-mloc->latitude*2);
        myScene.addEllipse(p.x()-1, p.y()-1, 5.0, 5.0, mypen, QBrush(Qt::SolidPattern));
        QGraphicsTextItem *cityText = new QGraphicsTextItem;
        cityText->setPos(p.x(),p.y());
        cityText->setPlainText(mloc->city);
        myScene.addItem(cityText);
    }
}
